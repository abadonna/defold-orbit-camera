
go.property("target", hash(""))
go.property("distance", 5)
go.property("angle_x", 0)
go.property("angle_y", 0)

local function set_camera(self)
	self.center = self.target ~= hash("") and go.get_world_position(self.target) or vmath.vector3(0)

	local rot = vmath.quat_rotation_y(self.angle_y) * vmath.quat_rotation_x(self.angle_x)
	local pos = vmath.rotate(rot, vmath.vector3(0, 0, self.distance))
	
	go.set_rotation(rot)
	go.set_position(self.center + pos)
end
	
function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("camera", "acquire_camera_focus")

	self.touch_down = false

	set_camera(self)
end

function update(self, dt)
	if self.target ~= hash("") and self.center ~= go.get_world_position(self.target) then
		set_camera(self)
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		self.touch_down = true
		if action.released then
			self.touch_down = false
		end
	end

	if self.touch_down and action_id == nil then

		self.angle_x = self.angle_x + action.dy * 0.01
		self.angle_y = self.angle_y - action.dx * 0.01
		set_camera(self)

	end
end
